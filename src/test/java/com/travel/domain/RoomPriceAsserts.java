package com.travel.domain;

import static com.travel.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RoomPriceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomPriceAllPropertiesEquals(RoomPrice expected, RoomPrice actual) {
        assertRoomPriceAutoGeneratedPropertiesEquals(expected, actual);
        assertRoomPriceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomPriceAllUpdatablePropertiesEquals(RoomPrice expected, RoomPrice actual) {
        assertRoomPriceUpdatableFieldsEquals(expected, actual);
        assertRoomPriceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomPriceAutoGeneratedPropertiesEquals(RoomPrice expected, RoomPrice actual) {
        assertThat(expected)
            .as("Verify RoomPrice auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomPriceUpdatableFieldsEquals(RoomPrice expected, RoomPrice actual) {
        assertThat(expected)
            .as("Verify RoomPrice relevant properties")
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getFromDate()).as("check fromDate").isEqualTo(actual.getFromDate()))
            .satisfies(e -> assertThat(e.getToDate()).as("check toDate").isEqualTo(actual.getToDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomPriceUpdatableRelationshipsEquals(RoomPrice expected, RoomPrice actual) {
        assertThat(expected)
            .as("Verify RoomPrice relationships")
            .satisfies(e -> assertThat(e.getRoom()).as("check room").isEqualTo(actual.getRoom()));
    }
}

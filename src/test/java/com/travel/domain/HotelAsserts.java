package com.travel.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HotelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelAllPropertiesEquals(Hotel expected, Hotel actual) {
        assertHotelAutoGeneratedPropertiesEquals(expected, actual);
        assertHotelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelAllUpdatablePropertiesEquals(Hotel expected, Hotel actual) {
        assertHotelUpdatableFieldsEquals(expected, actual);
        assertHotelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelAutoGeneratedPropertiesEquals(Hotel expected, Hotel actual) {
        assertThat(expected)
            .as("Verify Hotel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelUpdatableFieldsEquals(Hotel expected, Hotel actual) {
        assertThat(expected)
            .as("Verify Hotel relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getStarRating()).as("check starRating").isEqualTo(actual.getStarRating()))
            .satisfies(e -> assertThat(e.getContactNumber()).as("check contactNumber").isEqualTo(actual.getContactNumber()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getCountryCode()).as("check countryCode").isEqualTo(actual.getCountryCode()))
            .satisfies(e -> assertThat(e.getCityCode()).as("check cityCode").isEqualTo(actual.getCityCode()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelUpdatableRelationshipsEquals(Hotel expected, Hotel actual) {
        assertThat(expected)
            .as("Verify Hotel relationships")
            .satisfies(e -> assertThat(e.getTestimonial()).as("check testimonial").isEqualTo(actual.getTestimonial()));
    }
}

package com.travel.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AgencyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyAllPropertiesEquals(Agency expected, Agency actual) {
        assertAgencyAutoGeneratedPropertiesEquals(expected, actual);
        assertAgencyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyAllUpdatablePropertiesEquals(Agency expected, Agency actual) {
        assertAgencyUpdatableFieldsEquals(expected, actual);
        assertAgencyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyAutoGeneratedPropertiesEquals(Agency expected, Agency actual) {
        assertThat(expected)
            .as("Verify Agency auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyUpdatableFieldsEquals(Agency expected, Agency actual) {
        assertThat(expected)
            .as("Verify Agency relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getContactNumber()).as("check contactNumber").isEqualTo(actual.getContactNumber()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getWebsite()).as("check website").isEqualTo(actual.getWebsite()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyUpdatableRelationshipsEquals(Agency expected, Agency actual) {}
}

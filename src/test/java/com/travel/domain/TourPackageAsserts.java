package com.travel.domain;

import static com.travel.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TourPackageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourPackageAllPropertiesEquals(TourPackage expected, TourPackage actual) {
        assertTourPackageAutoGeneratedPropertiesEquals(expected, actual);
        assertTourPackageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourPackageAllUpdatablePropertiesEquals(TourPackage expected, TourPackage actual) {
        assertTourPackageUpdatableFieldsEquals(expected, actual);
        assertTourPackageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourPackageAutoGeneratedPropertiesEquals(TourPackage expected, TourPackage actual) {
        assertThat(expected)
            .as("Verify TourPackage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourPackageUpdatableFieldsEquals(TourPackage expected, TourPackage actual) {
        assertThat(expected)
            .as("Verify TourPackage relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getDurationDays()).as("check durationDays").isEqualTo(actual.getDurationDays()))
            .satisfies(e -> assertThat(e.getAvailable()).as("check available").isEqualTo(actual.getAvailable()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourPackageUpdatableRelationshipsEquals(TourPackage expected, TourPackage actual) {}
}
